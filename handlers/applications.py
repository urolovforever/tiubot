from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from database.db import Database
from states.forms import ApplicationForm
from keyboards.reply import get_cancel_keyboard, get_phone_keyboard, get_main_keyboard
from utils.helpers import t
from config import ADMIN_IDS
import logging

db = Database()
logger = logging.getLogger(__name__)


def get_applications_submenu_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    lang = db.get_user_language(user_id)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    buttons = {
        'uz': ['‚úçÔ∏è Murojaat yuborish', 'üîé Mening murojaatlarim'],
        'ru': ['‚úçÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', 'üîé –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è'],
        'en': ['‚úçÔ∏è Submit application', 'üîé My applications']
    }

    for btn in buttons.get(lang, buttons['uz']):
        keyboard.insert(KeyboardButton(btn))

    keyboard.add(KeyboardButton(t(user_id, 'back')))
    return keyboard


def get_user_type_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    lang = db.get_user_language(user_id)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    buttons = {
        'uz': ['üë®‚Äçüéì Talaba', 'üë®‚Äçüíº Xodim', 'üë§ Abituriyent', 'üßë‚Äçüíº Boshqa'],
        'ru': ['üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç', 'üë®‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫', 'üë§ –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç', 'üßë‚Äçüíº –î—Ä—É–≥–æ–µ'],
        'en': ['üë®‚Äçüéì Student', 'üë®‚Äçüíº Staff', 'üë§ Applicant', 'üßë‚Äçüíº Other']
    }

    for btn in buttons.get(lang, buttons['uz']):
        keyboard.insert(KeyboardButton(btn))

    keyboard.add(KeyboardButton(t(user_id, 'cancel')))
    return keyboard


def get_application_type_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    lang = db.get_user_language(user_id)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    buttons = {
        'uz': ['üìù Ariza', '‚ùì Savol', 'üí° Taklif', 'üò† Shikoyat'],
        'ru': ['üìù –ó–∞—è–≤–ª–µ–Ω–∏–µ', '‚ùì –í–æ–ø—Ä–æ—Å', 'üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', 'üò† –ñ–∞–ª–æ–±–∞'],
        'en': ['üìù Application', '‚ùì Question', 'üí° Suggestion', 'üò† Complaint']
    }

    for btn in buttons.get(lang, buttons['uz']):
        keyboard.insert(KeyboardButton(btn))

    keyboard.add(KeyboardButton(t(user_id, 'cancel')))
    return keyboard


def get_anonymity_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    """Anonim yoki ochiq murojaat tanlash"""
    lang = db.get_user_language(user_id)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    buttons = {
        'uz': ['üï∂ Anonim murojaat', 'üì± Ochiq murojaat'],
        'ru': ['üï∂ –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ', 'üì± –û—Ç–∫—Ä—ã—Ç–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ'],
        'en': ['üï∂ Anonymous request', 'üì± Public request']
    }

    for btn in buttons.get(lang, buttons['uz']):
        keyboard.add(KeyboardButton(btn))

    keyboard.add(KeyboardButton(t(user_id, 'cancel')))
    return keyboard


def get_yes_no_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    """Ha/Yo'q tugmalari (fayl biriktirish uchun)"""
    lang = db.get_user_language(user_id)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    buttons = {
        'uz': ['‚úÖ Ha', '‚ùå Yo\'q'],
        'ru': ['‚úÖ –î–∞', '‚ùå –ù–µ—Ç'],
        'en': ['‚úÖ Yes', '‚ùå No']
    }

    for btn in buttons.get(lang, buttons['uz']):
        keyboard.insert(KeyboardButton(btn))

    return keyboard


def get_confirmation_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    """Tasdiqlash keyboard - yuborish yoki bekor qilish"""
    lang = db.get_user_language(user_id)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    buttons = {
        'uz': ['‚úÖ Yuborish', '‚ùå Bekor qilish'],
        'ru': ['‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'],
        'en': ['‚úÖ Send', '‚ùå Cancel']
    }

    for btn in buttons.get(lang, buttons['uz']):
        keyboard.insert(KeyboardButton(btn))

    return keyboard


async def applications_menu_handler(message: types.Message):
    user_id = message.from_user.id
    lang = db.get_user_language(user_id)

    texts = {
        'uz': 'üì¨ Murojaatlar\n\nQuyidagi bo\'limlardan birini tanlang:',
        'ru': 'üì¨ –û–±—Ä–∞—â–µ–Ω–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤:',
        'en': 'üì¨ Applications\n\nChoose one of the sections:'
    }

    await message.answer(
        texts.get(lang, texts['uz']),
        reply_markup=get_applications_submenu_keyboard(user_id)
    )


async def start_application_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = db.get_user_language(user_id)

    texts = {
        'uz': '‚úçÔ∏è Murojaat yuborish\n\nKim sifatida murojaat qilasiz?',
        'ru': '‚úçÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ\n\n–ö–∞–∫ –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å?',
        'en': '‚úçÔ∏è Submit Application\n\nWho are you?'
    }

    await message.answer(
        texts.get(lang, texts['uz']),
        reply_markup=get_user_type_keyboard(user_id)
    )
    await ApplicationForm.waiting_for_user_type.set()


async def process_user_type(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if message.text in ['‚ùå Bekor qilish', '‚ùå –û—Ç–º–µ–Ω–∞', '‚ùå Cancel']:
        await state.finish()
        await message.answer(
            t(user_id, 'application_cancelled'),
            reply_markup=get_main_keyboard(user_id)
        )
        return

    await state.update_data(user_type=message.text)

    lang = db.get_user_language(user_id)
    texts = {
        'uz': 'Murojaat turini tanlang:',
        'ru': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:',
        'en': 'Choose application type:'
    }

    await message.answer(
        texts.get(lang, texts['uz']),
        reply_markup=get_application_type_keyboard(user_id)
    )
    await ApplicationForm.waiting_for_app_type.set()


async def process_app_type(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = db.get_user_language(user_id)

    if message.text in ['‚ùå Bekor qilish', '‚ùå –û—Ç–º–µ–Ω–∞', '‚ùå Cancel']:
        await state.finish()
        await message.answer(
            t(user_id, 'application_cancelled'),
            reply_markup=get_main_keyboard(user_id)
        )
        return

    await state.update_data(app_type=message.text)

    texts = {
        'uz': 'Murojaat turini tanlang:',
        'ru': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:',
        'en': 'Choose request type:'
    }

    await message.answer(
        texts.get(lang, texts['uz']),
        reply_markup=get_anonymity_keyboard(user_id)
    )
    await ApplicationForm.waiting_for_anonymity.set()


async def process_anonymity(message: types.Message, state: FSMContext):
    """Anonim yoki ochiq murojaat tanlanadi"""
    user_id = message.from_user.id
    lang = db.get_user_language(user_id)

    if message.text in ['‚ùå Bekor qilish', '‚ùå –û—Ç–º–µ–Ω–∞', '‚ùå Cancel']:
        await state.finish()
        await message.answer(
            t(user_id, 'application_cancelled'),
            reply_markup=get_main_keyboard(user_id)
        )
        return

    # Anonim yoki ochiq?
    is_anonymous = message.text in ['üï∂ Anonim murojaat', 'üï∂ –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ', 'üï∂ Anonymous request']
    await state.update_data(is_anonymous=is_anonymous)

    if is_anonymous:
        # Anonim - to'g'ridan-to'g'ri matn so'raymiz
        texts = {
            'uz': '‚úçÔ∏è Murojaatingizni yozing:',
            'ru': '‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:',
            'en': '‚úçÔ∏è Write your request:'
        }
        await message.answer(
            texts.get(lang, texts['uz']),
            reply_markup=get_cancel_keyboard(user_id)
        )
        await ApplicationForm.waiting_for_message.set()
    else:
        # Ochiq - telefon so'raymiz
        await message.answer(
            t(user_id, 'send_phone'),
            reply_markup=get_phone_keyboard(user_id)
        )
        await ApplicationForm.waiting_for_phone.set()


async def process_phone(message: types.Message, state: FSMContext):
    """Telefon raqamni qabul qilish (faqat ochiq murojaat uchun)"""
    user_id = message.from_user.id
    lang = db.get_user_language(user_id)

    if message.text in ['‚ùå Bekor qilish', '‚ùå –û—Ç–º–µ–Ω–∞', '‚ùå Cancel']:
        await state.finish()
        await message.answer(
            t(user_id, 'application_cancelled'),
            reply_markup=get_main_keyboard(user_id)
        )
        return

    phone = None

    if message.contact:
        phone = message.contact.phone_number
    elif message.text:
        phone = message.text

    if phone:
        await state.update_data(phone=phone)

        texts = {
            'uz': '‚úçÔ∏è Murojaatingizni yozing:',
            'ru': '‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:',
            'en': '‚úçÔ∏è Write your request:'
        }
        await message.answer(
            texts.get(lang, texts['uz']),
            reply_markup=get_cancel_keyboard(user_id)
        )
        await ApplicationForm.waiting_for_message.set()


async def process_application_message(message: types.Message, state: FSMContext):
    """Murojaat matnini qabul qilish"""
    user_id = message.from_user.id
    lang = db.get_user_language(user_id)

    if message.text in ['‚ùå Bekor qilish', '‚ùå –û—Ç–º–µ–Ω–∞', '‚ùå Cancel']:
        await state.finish()
        await message.answer(
            t(user_id, 'application_cancelled'),
            reply_markup=get_main_keyboard(user_id)
        )
        return

    await state.update_data(message=message.text)

    # Fayl biriktirmoqchimisiz?
    texts = {
        'uz': 'üìé Fayl biriktirmoqchimisiz?',
        'ru': 'üìé –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª?',
        'en': 'üìé Do you want to attach a file?'
    }
    await message.answer(
        texts.get(lang, texts['uz']),
        reply_markup=get_yes_no_keyboard(user_id)
    )
    await ApplicationForm.waiting_for_file_choice.set()


async def process_file_choice(message: types.Message, state: FSMContext):
    """Fayl biriktirish: Ha yoki Yo'q"""
    user_id = message.from_user.id
    lang = db.get_user_language(user_id)

    if message.text in ['‚ùå Bekor qilish', '‚ùå –û—Ç–º–µ–Ω–∞', '‚ùå Cancel', '‚ùå Yo\'q', '‚ùå –ù–µ—Ç', '‚ùå No']:
        # Yo'q - faylsiz davom etamiz
        await state.update_data(file_id=None)
        await show_confirmation(message, state)
        return

    if message.text in ['‚úÖ Ha', '‚úÖ –î–∞', '‚úÖ Yes']:
        # Ha - fayl yuborish
        texts = {
            'uz': 'üìé Faylni yuboring (rasm yoki hujjat):',
            'ru': 'üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç):',
            'en': 'üìé Send the file (photo or document):'
        }
        await message.answer(
            texts.get(lang, texts['uz']),
            reply_markup=get_cancel_keyboard(user_id)
        )
        await ApplicationForm.waiting_for_file.set()
    else:
        # Noto'g'ri javob
        texts = {
            'uz': '‚ùå Iltimos, "Ha" yoki "Yo\'q" tugmasini bosing',
            'ru': '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞" –∏–ª–∏ "–ù–µ—Ç"',
            'en': '‚ùå Please press "Yes" or "No" button'
        }
        await message.answer(
            texts.get(lang, texts['uz']),
            reply_markup=get_yes_no_keyboard(user_id)
        )


async def process_file(message: types.Message, state: FSMContext):
    """Faylni qabul qilish"""
    user_id = message.from_user.id

    if message.text in ['‚ùå Bekor qilish', '‚ùå –û—Ç–º–µ–Ω–∞', '‚ùå Cancel']:
        await state.finish()
        await message.answer(
            t(user_id, 'application_cancelled'),
            reply_markup=get_main_keyboard(user_id)
        )
        return

    file_id = None

    # Fayl turini aniqlash
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document:
        file_id = message.document.file_id

    await state.update_data(file_id=file_id)
    await show_confirmation(message, state)


async def show_confirmation(message: types.Message, state: FSMContext):
    """Tasdiqlash ekranini ko'rsatish"""
    user_id = message.from_user.id
    lang = db.get_user_language(user_id)
    data = await state.get_data()

    # Ma'lumotlarni formatlash
    is_anonymous = data.get('is_anonymous', False)

    anonymity_text = {
        'uz': 'üï∂ Anonim' if is_anonymous else 'üì± Ochiq',
        'ru': 'üï∂ –ê–Ω–æ–Ω–∏–º–Ω–æ–µ' if is_anonymous else 'üì± –û—Ç–∫—Ä—ã—Ç–æ–µ',
        'en': 'üï∂ Anonymous' if is_anonymous else 'üì± Public'
    }

    file_text = {
        'uz': '‚úÖ Biriktirilgan' if data.get('file_id') else '‚ùå Biriktirilmagan',
        'ru': '‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω' if data.get('file_id') else '‚ùå –ù–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω',
        'en': '‚úÖ Attached' if data.get('file_id') else '‚ùå Not attached'
    }

    confirmation_texts = {
        'uz': f'''üìã Murojaatingiz:

üë§ Kim: {data.get('user_type', '')}
üìù Turi: {data.get('app_type', '')}
üîí Holat: {anonymity_text['uz']}
{f"üì± Telefon: {data.get('phone', '')}" if not is_anonymous else ""}

üí¨ Matn:
{data.get('message', '')}

üìé Fayl: {file_text['uz']}

Yuborishni tasdiqlaysizmi?''',
        'ru': f'''üìã –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:

üë§ –ö—Ç–æ: {data.get('user_type', '')}
üìù –¢–∏–ø: {data.get('app_type', '')}
üîí –°—Ç–∞—Ç—É—Å: {anonymity_text['ru']}
{f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '')}" if not is_anonymous else ""}

üí¨ –¢–µ–∫—Å—Ç:
{data.get('message', '')}

üìé –§–∞–π–ª: {file_text['ru']}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É?''',
        'en': f'''üìã Your request:

üë§ Who: {data.get('user_type', '')}
üìù Type: {data.get('app_type', '')}
üîí Status: {anonymity_text['en']}
{f"üì± Phone: {data.get('phone', '')}" if not is_anonymous else ""}

üí¨ Text:
{data.get('message', '')}

üìé File: {file_text['en']}

Confirm sending?'''
    }

    await message.answer(
        confirmation_texts.get(lang, confirmation_texts['uz']),
        reply_markup=get_confirmation_keyboard(user_id)
    )
    await ApplicationForm.waiting_for_confirmation.set()


async def process_confirmation(message: types.Message, state: FSMContext):
    """Tasdiqlash va yuborish"""
    user_id = message.from_user.id

    if message.text in ['‚ùå Bekor qilish', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', '‚ùå Cancel']:
        await state.finish()
        await message.answer(
            t(user_id, 'application_cancelled'),
            reply_markup=get_main_keyboard(user_id)
        )
        return

    if message.text in ['‚úÖ Yuborish', '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', '‚úÖ Send']:
        await save_and_send_application(message, state)
    else:
        # Noto'g'ri javob
        lang = db.get_user_language(user_id)
        texts = {
            'uz': '‚ùå Iltimos, "Yuborish" yoki "Bekor qilish" tugmasini bosing',
            'ru': '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –∏–ª–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"',
            'en': '‚ùå Please press "Send" or "Cancel" button'
        }
        await message.answer(
            texts.get(lang, texts['uz']),
            reply_markup=get_confirmation_keyboard(user_id)
        )


async def save_and_send_application(message: types.Message, state: FSMContext):
    """Murojaatni saqlash va yuborish"""
    user_id = message.from_user.id
    data = await state.get_data()
    user = db.get_user(user_id)

    username = user[1] if user else message.from_user.username or ''
    full_name = user[2] if user else message.from_user.full_name
    phone = data.get('phone', '')
    is_anonymous = data.get('is_anonymous', False)

    app_id = db.create_application(
        user_id,
        username,
        full_name,
        phone,
        data['message'],
        data.get('file_id'),
        user_type=data.get('user_type', ''),
        app_type=data.get('app_type', ''),
        is_anonymous=is_anonymous
    )

    await message.answer(
        t(user_id, 'application_sent'),
        reply_markup=get_main_keyboard(user_id)
    )

    # Notify admins
    anonymity_status = 'üï∂ ANONIM (foydalanuvchi uchun)' if is_anonymous else 'üì± OCHIQ'
    phone_display = f"  ‚Ä¢ Telefon: {phone}" if phone else "  ‚Ä¢ Telefon: -"

    admin_text = f'''üÜï Yangi murojaat #{app_id}

üë§ Foydalanuvchi:
  ‚Ä¢ Ism: {full_name}
  ‚Ä¢ Username: @{username if username else "yo'q"}
  ‚Ä¢ ID: {user_id}
  ‚Ä¢ Link: tg://user?id={user_id}
{phone_display}

üìã Murojaat ma'lumotlari:
  ‚Ä¢ Kim: {data.get('user_type', '')}
  ‚Ä¢ Turi: {data.get('app_type', '')}
  ‚Ä¢ Holat: {anonymity_status}

üí¨ Matn:
{data['message']}

üìå Javob: /reply_{app_id}'''

    for admin_id in ADMIN_IDS:
        try:
            if data.get('file_id'):
                await message.bot.send_photo(admin_id, data['file_id'], caption=admin_text)
            else:
                await message.bot.send_message(admin_id, admin_text)
        except Exception as e:
            logger.error(f'Error notifying admin {admin_id}: {e}')

    await state.finish()


async def my_applications_handler(message: types.Message):
    user_id = message.from_user.id
    lang = db.get_user_language(user_id)

    apps = db.get_user_applications(user_id, 20)

    if not apps:
        texts = {
            'uz': 'Sizda hali murojaatlar yo\'q.',
            'ru': '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.',
            'en': 'You don\'t have any applications yet.'
        }
        await message.answer(
            texts.get(lang, texts['uz']),
            reply_markup=get_applications_submenu_keyboard(user_id)
        )
        return

    status_map = {
        'new': {'uz': 'üÜï Yangi', 'ru': 'üÜï –ù–æ–≤–æ–µ', 'en': 'üÜï New'},
        'answered': {'uz': '‚úÖ Javob berildi', 'ru': '‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ', 'en': '‚úÖ Answered'}
    }

    texts = {
        'uz': 'üìã Sizning murojaatlaringiz:\n\n',
        'ru': 'üìã –í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n',
        'en': 'üìã Your applications:\n\n'
    }

    text = texts.get(lang, texts['uz'])
    for app in apps:
        status = status_map.get(app[2], {}).get(lang, app[2])
        text += f'#{app[0]} - {status}\nüìÖ {app[3]}\n\n'

    await message.answer(
        text,
        reply_markup=get_applications_submenu_keyboard(user_id)
    )


def register_applications_handlers(dp: Dispatcher):
    dp.register_message_handler(
        applications_menu_handler,
        lambda message: message.text in ['üì¨ Murojaatlar', 'üì¨ –û–±—Ä–∞—â–µ–Ω–∏—è', 'üì¨ Applications']
    )
    dp.register_message_handler(
        start_application_handler,
        lambda message: message.text in [
            '‚úçÔ∏è Murojaat yuborish',
            '‚úçÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ',
            '‚úçÔ∏è Submit application'
        ],
        state='*'
    )
    dp.register_message_handler(
        my_applications_handler,
        lambda message: message.text in [
            'üîé Mening murojaatlarim',
            'üîé –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è',
            'üîé My applications'
        ]
    )
    dp.register_message_handler(process_user_type, state=ApplicationForm.waiting_for_user_type)
    dp.register_message_handler(process_app_type, state=ApplicationForm.waiting_for_app_type)
    dp.register_message_handler(process_anonymity, state=ApplicationForm.waiting_for_anonymity)
    dp.register_message_handler(process_phone, content_types=['text', 'contact'],
                                state=ApplicationForm.waiting_for_phone)
    dp.register_message_handler(process_application_message, state=ApplicationForm.waiting_for_message)
    dp.register_message_handler(process_file_choice, state=ApplicationForm.waiting_for_file_choice)
    dp.register_message_handler(process_file, content_types=['text', 'photo', 'document'],
                                state=ApplicationForm.waiting_for_file)
    dp.register_message_handler(process_confirmation, state=ApplicationForm.waiting_for_confirmation)


